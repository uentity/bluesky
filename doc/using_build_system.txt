USING BLUE-SKY BUILD SYSTEM

BlueSky build system is simple, but designed to be flexible enough to provide building
framework for BlueSky kernel and various plugins.

Main script does not more than invoking SConscript for all files, enumerated
in ss_tree list, plus some additional steps. These steps include creation of
custom environment custom_env, associated custom build variables set
custom_vars and invoking user-defined script scons_env.custom.

custom_vars contains some predefined build variables, ex. 'debug' with default
value '1', and 'release' with default value '0'. These variables controls
whether your script should build a debug and/or release version of code
(with debug enabled by default). custom_env is initialized as emty scons
environment with associated custom_vars. Note that default values for build
variables will be read from file scons_vars.custom, if it exists in the top
BlueSky directory from where SConstruct is run (scons_vars on creation
is passed with paramter 'scons_vars.custom', which forces to read default
values from given file). The scons_vars.custom is processed like python
script and has a very simple format:
var1 = value1
var2 = value2
This allows you to omit var1=value1 and var2=value2 on command line without 
having to edit corresponding sconscripts.

Common widely used approach is to place all specific settings inside OS user
environment which is shared between all running programs. However, changing
OS environment is not that easy, as editing simple Python script,
containing all you need in one place. Also in latter case you have your
settings applied immediately, upon next build start. Concentrating settings
inside scons_env.custom makes build process independent of OS environment and
more predictable. Of cause, if you want you can make use of your OS
environment by passing needed values to custom_env. But general advise is
to do all setup explicitly in scons_env.custom, making it self-explanatory and
easily replaceable by new developers.

When all initialization is done, variables such as ss_tree, custom_vars,
custom_env, etc are shared via scons's Export() function in order to be
accessible from within another build scripts.

The key point of underlying build framework is custom user's processing
script scons_env.custom, which is invoked (if exists) before all
sconscripts for every build type. By default SConstruct supports two build
types --- debug and release (and corresponding build variables), but this
list can be extended during special 'init' stage.

Build types list is stored in shared variable build_kinds. Current build
type contained in variable build_kind. There is a special build kind, called
'init'. During init only scons_env.custom is parsed. The main purpose of
this stage is to extend ss_tree list with plugins you wish to build and do
other custom global setup.

The main task of scons_env.custom is to modify custom_env
and ss_tree according to specific user-related environment.
Such environment includes paths to libraries, machine-related compiler
switches, etc. All build scripts should be added to ss_tree. By default,
only BlueSky kernel and bspy_loader is build, so if you want to build some
plugins, just append corresponding sconscripts to ss_tree list.
Note, that ss_tree is ORDER-SENSITIVE, so be shure to include all
dependencies _before_ dependent script.

Also after init stage, scons_env_custom is called before all other
sconscripts in order to adjust build environment to specific build type. You
can set proper compiler flags, etc depending on required assembly. Here, 3
more shared variables are available to all sconscripts, including
scons_env.custom --- tar_build_dir (root dir for object files, defaults to
build/$build_kind), tar_exe_dir (root dir where all target libs should be
placed after build, defaults to exe/$build_kind) and tar_exe_plugins
(where plugin libs should be placed, defaults to $tar_exe_dir/plugins). This
varables can be altered in scons_env.custom before the build starts.

So, basically adjusting the build process to your environment includes the
following steps.
1) Create script scons_vars.custom, where you can place custom defaul values
for any build variables (see scons documentation on this).
2) Create script scons_env.custom.
2.1) Extend list of build scripts by appending new scripts to ss_tree
variable during init build kind. Do other global things here.
2.2) Modify custom_env according to your environment for every specific
build kind.
2.3) Export changes done via Export([varaibales_list])
Although it seems that exporting custom_vars and custom_env only once in the
beginning of SConstruct is enough to track all changes, you MUST explicitly
export ss_tree, otherwise main SConstruct won't see your changes after
exiting from scons_env.custom.
2.4 You can place additional checks, tunings, and whatever you like.

Please, follow basic rules described below.
1) In general you shouldn't rely on existence of scons_env.custom and your 
targets should build without it.
2) Place all build variables that your script depends on inplace, i.e. right
before use and not in the scons_env.custom. User can easily change the
default value of your variable via own scons_vars.custom and unexpected
scons_env.custom won't break the build.
3) DO NOT replace custom_env with Environment() call in scons_env.custom.
Use Import('*') and scons_env.Replace instead.

En example of scons.env.custom, called scons_env.custom.example is shipped
with BlueSky kernel source bundle, so you can use it as a template for your
own code.

Inside your plugin's sconscript you would normally do
Import('*') to import all stuff exported earlier, includin custom_env,
then create your own build environment by cloning custom_env:
my_build_env = custom_env.Clone();

